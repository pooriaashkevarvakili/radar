// tslint:disable
/**
 * User
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: User
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FlightSearchHistoryRequest
 */
export interface FlightSearchHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof FlightSearchHistoryRequest
     */
    from?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FlightSearchHistoryRequest
     */
    to?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FlightSearchHistoryRequest
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof FlightSearchHistoryRequest
     */
    passengerCount?: number | null;
}
/**
 * 
 * @export
 * @interface HotelSearchHistoryRequest
 */
export interface HotelSearchHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof HotelSearchHistoryRequest
     */
    cityTitle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchHistoryRequest
     */
    hotelTitle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchHistoryRequest
     */
    checkInDate?: string;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchHistoryRequest
     */
    checkOutDate?: string;
    /**
     * 
     * @type {number}
     * @memberof HotelSearchHistoryRequest
     */
    passengerCount?: number | null;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    token?: string | null;
    /**
     * 
     * @type {UserFullDetails}
     * @memberof LoginResponseDto
     */
    userDetails?: UserFullDetails;
}
/**
 * 
 * @export
 * @interface OtpLoginRequestDto
 */
export interface OtpLoginRequestDto {
    /**
     * 
     * @type {string}
     * @memberof OtpLoginRequestDto
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OtpLoginRequestDto
     */
    token?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OtpLoginRequestDto
     */
    rememberMe?: boolean;
}
/**
 * 
 * @export
 * @interface ResortSearchHistoryRequest
 */
export interface ResortSearchHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof ResortSearchHistoryRequest
     */
    searchValue?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResortSearchHistoryRequest
     */
    checkInDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ResortSearchHistoryRequest
     */
    checkOutDate?: string;
    /**
     * 
     * @type {number}
     * @memberof ResortSearchHistoryRequest
     */
    passengerCount?: number | null;
}
/**
 * 
 * @export
 * @interface SignUpRequestDto
 */
export interface SignUpRequestDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestDto
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestDto
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestDto
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestDto
     */
    phoneNumber?: string | null;
}
/**
 * 
 * @export
 * @interface UserFullDetails
 */
export interface UserFullDetails {
    /**
     * 
     * @type {number}
     * @memberof UserFullDetails
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserFullDetails
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserFullDetails
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserFullDetails
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserFullDetails
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserFullDetails
     */
    email?: string | null;
}

/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginGetSmsTokenPhoneGet: async (phone: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phone' is not null or undefined
            if (phone === null || phone === undefined) {
                throw new RequiredError('phone','Required parameter phone was null or undefined when calling apiLoginGetSmsTokenPhoneGet.');
            }
            const localVarPath = `/api/Login/GetSmsToken/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginVerifySmsPost: async (otpLoginRequestDto?: OtpLoginRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/VerifySms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof otpLoginRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(otpLoginRequestDto !== undefined ? otpLoginRequestDto : {}) : (otpLoginRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginGetSmsTokenPhoneGet(phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).apiLoginGetSmsTokenPhoneGet(phone, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginVerifySmsPost(otpLoginRequestDto?: OtpLoginRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).apiLoginVerifySmsPost(otpLoginRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginGetSmsTokenPhoneGet(phone: string, options?: any): AxiosPromise<void> {
            return LoginApiFp(configuration).apiLoginGetSmsTokenPhoneGet(phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginVerifySmsPost(otpLoginRequestDto?: OtpLoginRequestDto, options?: any): AxiosPromise<LoginResponseDto> {
            return LoginApiFp(configuration).apiLoginVerifySmsPost(otpLoginRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginGetSmsTokenPhoneGet(phone: string, options?: any) {
        return LoginApiFp(this.configuration).apiLoginGetSmsTokenPhoneGet(phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginVerifySmsPost(otpLoginRequestDto?: OtpLoginRequestDto, options?: any) {
        return LoginApiFp(this.configuration).apiLoginVerifySmsPost(otpLoginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SearchHistoryApi - axios parameter creator
 * @export
 */
export const SearchHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryFlightPost: async (flightSearchHistoryRequest?: FlightSearchHistoryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SearchHistory/flight`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof flightSearchHistoryRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(flightSearchHistoryRequest !== undefined ? flightSearchHistoryRequest : {}) : (flightSearchHistoryRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryHotelPost: async (hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SearchHistory/hotel`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof hotelSearchHistoryRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(hotelSearchHistoryRequest !== undefined ? hotelSearchHistoryRequest : {}) : (hotelSearchHistoryRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryResortPost: async (resortSearchHistoryRequest?: ResortSearchHistoryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SearchHistory/resort`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resortSearchHistoryRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resortSearchHistoryRequest !== undefined ? resortSearchHistoryRequest : {}) : (resortSearchHistoryRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchHistoryApi - functional programming interface
 * @export
 */
export const SearchHistoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchHistoryFlightPost(flightSearchHistoryRequest?: FlightSearchHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SearchHistoryApiAxiosParamCreator(configuration).apiSearchHistoryFlightPost(flightSearchHistoryRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchHistoryHotelPost(hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SearchHistoryApiAxiosParamCreator(configuration).apiSearchHistoryHotelPost(hotelSearchHistoryRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchHistoryResortPost(resortSearchHistoryRequest?: ResortSearchHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SearchHistoryApiAxiosParamCreator(configuration).apiSearchHistoryResortPost(resortSearchHistoryRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchHistoryApi - factory interface
 * @export
 */
export const SearchHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryFlightPost(flightSearchHistoryRequest?: FlightSearchHistoryRequest, options?: any): AxiosPromise<void> {
            return SearchHistoryApiFp(configuration).apiSearchHistoryFlightPost(flightSearchHistoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryHotelPost(hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options?: any): AxiosPromise<void> {
            return SearchHistoryApiFp(configuration).apiSearchHistoryHotelPost(hotelSearchHistoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryResortPost(resortSearchHistoryRequest?: ResortSearchHistoryRequest, options?: any): AxiosPromise<void> {
            return SearchHistoryApiFp(configuration).apiSearchHistoryResortPost(resortSearchHistoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchHistoryApi - object-oriented interface
 * @export
 * @class SearchHistoryApi
 * @extends {BaseAPI}
 */
export class SearchHistoryApi extends BaseAPI {
    /**
     * 
     * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchHistoryApi
     */
    public apiSearchHistoryFlightPost(flightSearchHistoryRequest?: FlightSearchHistoryRequest, options?: any) {
        return SearchHistoryApiFp(this.configuration).apiSearchHistoryFlightPost(flightSearchHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchHistoryApi
     */
    public apiSearchHistoryHotelPost(hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options?: any) {
        return SearchHistoryApiFp(this.configuration).apiSearchHistoryHotelPost(hotelSearchHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchHistoryApi
     */
    public apiSearchHistoryResortPost(resortSearchHistoryRequest?: ResortSearchHistoryRequest, options?: any) {
        return SearchHistoryApiFp(this.configuration).apiSearchHistoryResortPost(resortSearchHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SignUpApi - axios parameter creator
 * @export
 */
export const SignUpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPhoneNumberPhoneNumberIsAvailableGet: async (phoneNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber','Required parameter phoneNumber was null or undefined when calling apiSignUpPhoneNumberPhoneNumberIsAvailableGet.');
            }
            const localVarPath = `/api/SignUp/PhoneNumber/{phoneNumber}/IsAvailable`
                .replace(`{${"phoneNumber"}}`, encodeURIComponent(String(phoneNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpRequestDto} [signUpRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPost: async (signUpRequestDto?: SignUpRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SignUp`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof signUpRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signUpRequestDto !== undefined ? signUpRequestDto : {}) : (signUpRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignUpApi - functional programming interface
 * @export
 */
export const SignUpApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await SignUpApiAxiosParamCreator(configuration).apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SignUpRequestDto} [signUpRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSignUpPost(signUpRequestDto?: SignUpRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SignUpApiAxiosParamCreator(configuration).apiSignUpPost(signUpRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SignUpApi - factory interface
 * @export
 */
export const SignUpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber: string, options?: any): AxiosPromise<boolean> {
            return SignUpApiFp(configuration).apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignUpRequestDto} [signUpRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPost(signUpRequestDto?: SignUpRequestDto, options?: any): AxiosPromise<void> {
            return SignUpApiFp(configuration).apiSignUpPost(signUpRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignUpApi - object-oriented interface
 * @export
 * @class SignUpApi
 * @extends {BaseAPI}
 */
export class SignUpApi extends BaseAPI {
    /**
     * 
     * @param {string} phoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignUpApi
     */
    public apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber: string, options?: any) {
        return SignUpApiFp(this.configuration).apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignUpRequestDto} [signUpRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignUpApi
     */
    public apiSignUpPost(signUpRequestDto?: SignUpRequestDto, options?: any) {
        return SignUpApiFp(this.configuration).apiSignUpPost(signUpRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetUserGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/GetUser`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGetUserGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFullDetails>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiUserGetUserGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetUserGet(options?: any): AxiosPromise<UserFullDetails> {
            return UserApiFp(configuration).apiUserGetUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGetUserGet(options?: any) {
        return UserApiFp(this.configuration).apiUserGetUserGet(options).then((request) => request(this.axios, this.basePath));
    }

}


