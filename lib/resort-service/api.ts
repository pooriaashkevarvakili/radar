// tslint:disable
/**
 * residence
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Residence
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {string} [value] 
         * @param {boolean} [hasValue] 
         * @param {string} [host] 
         * @param {number} [port] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageGet: async (name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Image`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['widthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['heightSize'] = heightSize;
            }

            if (value !== undefined) {
                localVarQueryParameter['Value'] = value;
            }

            if (hasValue !== undefined) {
                localVarQueryParameter['HasValue'] = hasValue;
            }

            if (host !== undefined) {
                localVarQueryParameter['Host'] = host;
            }

            if (port !== undefined) {
                localVarQueryParameter['Port'] = port;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {string} [value] 
         * @param {boolean} [hasValue] 
         * @param {string} [host] 
         * @param {number} [port] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageGet(name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ImageApiAxiosParamCreator(configuration).apiImageGet(name, widthSize, heightSize, value, hasValue, host, port, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {string} [value] 
         * @param {boolean} [hasValue] 
         * @param {string} [host] 
         * @param {number} [port] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageGet(name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options?: any): AxiosPromise<void> {
            return ImageApiFp(configuration).apiImageGet(name, widthSize, heightSize, value, hasValue, host, port, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @param {string} [name] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {string} [value] 
     * @param {boolean} [hasValue] 
     * @param {string} [host] 
     * @param {number} [port] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageGet(name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options?: any) {
        return ImageApiFp(this.configuration).apiImageGet(name, widthSize, heightSize, value, hasValue, host, port, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ResidenceApi - axios parameter creator
 * @export
 */
export const ResidenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceCommentsGet: async (id?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceDefaultCitiesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/defaultCities`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceImagesGet: async (id?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/images`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceMetaGet: async (id?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/meta`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [checkInDate] 
         * @param {string} [checkoutDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidencePriceGet: async (id?: number, checkInDate?: string, checkoutDate?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/price`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (checkInDate !== undefined) {
                localVarQueryParameter['checkInDate'] = (checkInDate as any instanceof Date) ?
                    (checkInDate as any).toISOString() :
                    checkInDate;
            }

            if (checkoutDate !== undefined) {
                localVarQueryParameter['checkoutDate'] = (checkoutDate as any instanceof Date) ?
                    (checkoutDate as any).toISOString() :
                    checkoutDate;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchValue] 
         * @param {string} [checkInDate] 
         * @param {string} [checkoutDate] 
         * @param {number} [capacity] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceSearchGet: async (searchValue?: string, checkInDate?: string, checkoutDate?: string, capacity?: number, widthSize?: number, heightSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchValue !== undefined) {
                localVarQueryParameter['searchValue'] = searchValue;
            }

            if (checkInDate !== undefined) {
                localVarQueryParameter['checkInDate'] = (checkInDate as any instanceof Date) ?
                    (checkInDate as any).toISOString() :
                    checkInDate;
            }

            if (checkoutDate !== undefined) {
                localVarQueryParameter['checkoutDate'] = (checkoutDate as any instanceof Date) ?
                    (checkoutDate as any).toISOString() :
                    checkoutDate;
            }

            if (capacity !== undefined) {
                localVarQueryParameter['capacity'] = capacity;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['widthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['heightSize'] = heightSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {number} [capacity] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceSimilarGet: async (id?: number, capacity?: number, widthSize?: number, heightSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/similar`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (capacity !== undefined) {
                localVarQueryParameter['capacity'] = capacity;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['widthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['heightSize'] = heightSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceSuggestionGet: async (searchValue?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/residence/suggestion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchValue !== undefined) {
                localVarQueryParameter['searchValue'] = searchValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResidenceApi - functional programming interface
 * @export
 */
export const ResidenceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceCommentsGet(id?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceCommentsGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceDefaultCitiesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceDefaultCitiesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceImagesGet(id?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceImagesGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceMetaGet(id?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceMetaGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [checkInDate] 
         * @param {string} [checkoutDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidencePriceGet(id?: number, checkInDate?: string, checkoutDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidencePriceGet(id, checkInDate, checkoutDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [searchValue] 
         * @param {string} [checkInDate] 
         * @param {string} [checkoutDate] 
         * @param {number} [capacity] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceSearchGet(searchValue?: string, checkInDate?: string, checkoutDate?: string, capacity?: number, widthSize?: number, heightSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceSearchGet(searchValue, checkInDate, checkoutDate, capacity, widthSize, heightSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {number} [capacity] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceSimilarGet(id?: number, capacity?: number, widthSize?: number, heightSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceSimilarGet(id, capacity, widthSize, heightSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [searchValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiResidenceSuggestionGet(searchValue?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResidenceApiAxiosParamCreator(configuration).apiResidenceSuggestionGet(searchValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResidenceApi - factory interface
 * @export
 */
export const ResidenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceCommentsGet(id?: number, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceCommentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceDefaultCitiesGet(options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceDefaultCitiesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceImagesGet(id?: number, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceImagesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceMetaGet(id?: number, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceMetaGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [checkInDate] 
         * @param {string} [checkoutDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidencePriceGet(id?: number, checkInDate?: string, checkoutDate?: string, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidencePriceGet(id, checkInDate, checkoutDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchValue] 
         * @param {string} [checkInDate] 
         * @param {string} [checkoutDate] 
         * @param {number} [capacity] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceSearchGet(searchValue?: string, checkInDate?: string, checkoutDate?: string, capacity?: number, widthSize?: number, heightSize?: number, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceSearchGet(searchValue, checkInDate, checkoutDate, capacity, widthSize, heightSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {number} [capacity] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceSimilarGet(id?: number, capacity?: number, widthSize?: number, heightSize?: number, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceSimilarGet(id, capacity, widthSize, heightSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiResidenceSuggestionGet(searchValue?: string, options?: any): AxiosPromise<void> {
            return ResidenceApiFp(configuration).apiResidenceSuggestionGet(searchValue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResidenceApi - object-oriented interface
 * @export
 * @class ResidenceApi
 * @extends {BaseAPI}
 */
export class ResidenceApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceCommentsGet(id?: number, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceCommentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceDefaultCitiesGet(options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceDefaultCitiesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceImagesGet(id?: number, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceImagesGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceMetaGet(id?: number, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceMetaGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {string} [checkInDate] 
     * @param {string} [checkoutDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidencePriceGet(id?: number, checkInDate?: string, checkoutDate?: string, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidencePriceGet(id, checkInDate, checkoutDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchValue] 
     * @param {string} [checkInDate] 
     * @param {string} [checkoutDate] 
     * @param {number} [capacity] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceSearchGet(searchValue?: string, checkInDate?: string, checkoutDate?: string, capacity?: number, widthSize?: number, heightSize?: number, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceSearchGet(searchValue, checkInDate, checkoutDate, capacity, widthSize, heightSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {number} [capacity] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceSimilarGet(id?: number, capacity?: number, widthSize?: number, heightSize?: number, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceSimilarGet(id, capacity, widthSize, heightSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResidenceApi
     */
    public apiResidenceSuggestionGet(searchValue?: string, options?: any) {
        return ResidenceApiFp(this.configuration).apiResidenceSuggestionGet(searchValue, options).then((request) => request(this.axios, this.basePath));
    }

}


