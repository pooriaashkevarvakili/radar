// tslint:disable
/**
 * hotel
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Hotel
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddClickedPriceRequest
 */
export interface AddClickedPriceRequest {
    /**
     * 
     * @type {number}
     * @memberof AddClickedPriceRequest
     */
    ClickedPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof AddClickedPriceRequest
     */
    MaximumPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof AddClickedPriceRequest
     */
    Currency?: string;
}
/**
 * 
 * @export
 * @interface CalenderRequest
 */
export interface CalenderRequest {
    /**
     * 
     * @type {number}
     * @memberof CalenderRequest
     */
    CityId?: number;
    /**
     * 
     * @type {string}
     * @memberof CalenderRequest
     */
    FromDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CalenderRequest
     */
    ToDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CalenderRequest
     */
    DayCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CalenderRequest
     */
    CurrencyCode?: string;
}
/**
 * 
 * @export
 * @interface GetSimilarHotelsRequest
 */
export interface GetSimilarHotelsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetSimilarHotelsRequest
     */
    HotelName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSimilarHotelsRequest
     */
    CityName?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSimilarHotelsRequest
     */
    CheckInDate?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSimilarHotelsRequest
     */
    CheckOutDate?: string;
}
/**
 * 
 * @export
 * @interface HotelSearchRequest
 */
export interface HotelSearchRequest {
    /**
     * 
     * @type {number}
     * @memberof HotelSearchRequest
     */
    CityId?: number;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchRequest
     */
    CityName?: string;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchRequest
     */
    HotelType?: string;
    /**
     * 
     * @type {number}
     * @memberof HotelSearchRequest
     */
    CategoryId?: number;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchRequest
     */
    CheckInDate?: string;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchRequest
     */
    CheckOutDate?: string;
    /**
     * 
     * @type {string}
     * @memberof HotelSearchRequest
     */
    CurrencyCode?: string;
    /**
     * 
     * @type {number}
     * @memberof HotelSearchRequest
     */
    Capacity?: number;
    /**
     * 
     * @type {number}
     * @memberof HotelSearchRequest
     */
    WidthSize?: number;
    /**
     * 
     * @type {number}
     * @memberof HotelSearchRequest
     */
    HeightSize?: number;
    /**
     * 
     * @type {boolean}
     * @memberof HotelSearchRequest
     */
    IncludeCityInfo?: boolean;
}

/**
 * CalendarApi - axios parameter creator
 * @export
 */
export const CalendarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CalenderRequest} [calendarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCalendarPost: async (calendarRequest?: CalenderRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Calendar`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof calendarRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(calendarRequest !== undefined ? calendarRequest : {}) : (calendarRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarApi - functional programming interface
 * @export
 */
export const CalendarApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CalenderRequest} [calendarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCalendarPost(calendarRequest?: CalenderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CalendarApiAxiosParamCreator(configuration).apiCalendarPost(calendarRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CalendarApi - factory interface
 * @export
 */
export const CalendarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CalenderRequest} [calendarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCalendarPost(calendarRequest?: CalenderRequest, options?: any): AxiosPromise<void> {
            return CalendarApiFp(configuration).apiCalendarPost(calendarRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendarApi - object-oriented interface
 * @export
 * @class CalendarApi
 * @extends {BaseAPI}
 */
export class CalendarApi extends BaseAPI {
    /**
     * 
     * @param {CalenderRequest} [calendarRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public apiCalendarPost(calendarRequest?: CalenderRequest, options?: any) {
        return CalendarApiFp(this.configuration).apiCalendarPost(calendarRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CityListApi - axios parameter creator
 * @export
 */
export const CityListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [ResidenceCity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCityListGet: async (ResidenceCity?: number , options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CityList`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ResidenceCity !== undefined) {
                localVarQueryParameter['ResidenceCity'] = ResidenceCity;
            }
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CityListApi - functional programming interface
 * @export
 */
export const CityListApiFp = function(configuration?: Configuration) {
    return {
        /**
         * @param {number} [ResidenceCity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCityListGet(ResidenceCity?: number ,options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CityListApiAxiosParamCreator(configuration).apiCityListGet(ResidenceCity , options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CityListApi - factory interface
 * @export
 */
export const CityListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * @param {number} [ResidenceCity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCityListGet(ResidenceCity?: number ,options?: any): AxiosPromise<void> {
            return CityListApiFp(configuration).apiCityListGet(ResidenceCity,options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CityListApi - object-oriented interface
 * @export
 * @class CityListApi
 * @extends {BaseAPI}
 */
export class CityListApi extends BaseAPI {
    /**
     * 
     * @param {number} [ResidenceCity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CityListApi
     */
    public apiCityListGet(ResidenceCity?: number , options?: any) {
        return CityListApiFp(this.configuration).apiCityListGet(ResidenceCity, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ClickedPriceApi - axios parameter creator
 * @export
 */
export const ClickedPriceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddClickedPriceRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClickedPriceAddPost: async (request?: AddClickedPriceRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ClickedPrice/Add`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClickedPriceApi - functional programming interface
 * @export
 */
export const ClickedPriceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddClickedPriceRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClickedPriceAddPost(request?: AddClickedPriceRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ClickedPriceApiAxiosParamCreator(configuration).apiClickedPriceAddPost(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ClickedPriceApi - factory interface
 * @export
 */
export const ClickedPriceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {AddClickedPriceRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClickedPriceAddPost(request?: AddClickedPriceRequest, options?: any): AxiosPromise<void> {
            return ClickedPriceApiFp(configuration).apiClickedPriceAddPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClickedPriceApi - object-oriented interface
 * @export
 * @class ClickedPriceApi
 * @extends {BaseAPI}
 */
export class ClickedPriceApi extends BaseAPI {
    /**
     * 
     * @param {AddClickedPriceRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClickedPriceApi
     */
    public apiClickedPriceAddPost(request?: AddClickedPriceRequest, options?: any) {
        return ClickedPriceApiFp(this.configuration).apiClickedPriceAddPost(request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HotelApi - axios parameter creator
 * @export
 */
export const HotelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [hotelNameEn] 
         * @param {string} [cityNameEn] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelCommentsGet: async (hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hotel/Comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hotelNameEn !== undefined) {
                localVarQueryParameter['hotelNameEn'] = hotelNameEn;
            }

            if (cityNameEn !== undefined) {
                localVarQueryParameter['cityNameEn'] = cityNameEn;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [hotelNameEn] 
         * @param {string} [cityNameEn] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {number} [skip] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelImagesGet: async (hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, skip?: number, width?: number, height?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hotel/Images`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hotelNameEn !== undefined) {
                localVarQueryParameter['hotelNameEn'] = hotelNameEn;
            }

            if (cityNameEn !== undefined) {
                localVarQueryParameter['cityNameEn'] = cityNameEn;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [hotelId] 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelNameEn] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelsAdminGetHotelsMetaGet: async (hotelId?: number, cityNameEn?: string, hotelNameEn?: string, widthSize?: number, heightSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HotelsAdmin/GetHotels/meta`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hotelId !== undefined) {
                localVarQueryParameter['HotelId'] = hotelId;
            }

            if (cityNameEn !== undefined) {
                localVarQueryParameter['CityNameEn'] = cityNameEn;
            }

            if (hotelNameEn !== undefined) {
                localVarQueryParameter['HotelNameEn'] = hotelNameEn;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['WidthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['HeightSize'] = heightSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [currency] 
         * @param {GetSimilarHotelsRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelsSimilarPost: async (count?: number, width?: number, height?: number, currency?: string, request?: GetSimilarHotelsRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hotels/Similar`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelApi - functional programming interface
 * @export
 */
export const HotelApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [hotelNameEn] 
         * @param {string} [cityNameEn] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelCommentsGet(hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelApiAxiosParamCreator(configuration).apiHotelCommentsGet(hotelNameEn, cityNameEn, page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [hotelNameEn] 
         * @param {string} [cityNameEn] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {number} [skip] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelImagesGet(hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, skip?: number, width?: number, height?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelApiAxiosParamCreator(configuration).apiHotelImagesGet(hotelNameEn, cityNameEn, page, size, skip, width, height, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [hotelId] 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelNameEn] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelsAdminGetHotelsMetaGet(hotelId?: number, cityNameEn?: string, hotelNameEn?: string, widthSize?: number, heightSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelApiAxiosParamCreator(configuration).apiHotelsAdminGetHotelsMetaGet(hotelId, cityNameEn, hotelNameEn, widthSize, heightSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [currency] 
         * @param {GetSimilarHotelsRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelsSimilarPost(count?: number, width?: number, height?: number, currency?: string, request?: GetSimilarHotelsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelApiAxiosParamCreator(configuration).apiHotelsSimilarPost(count, width, height, currency, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HotelApi - factory interface
 * @export
 */
export const HotelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [hotelNameEn] 
         * @param {string} [cityNameEn] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelCommentsGet(hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, options?: any): AxiosPromise<void> {
            return HotelApiFp(configuration).apiHotelCommentsGet(hotelNameEn, cityNameEn, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [hotelNameEn] 
         * @param {string} [cityNameEn] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {number} [skip] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelImagesGet(hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, skip?: number, width?: number, height?: number, options?: any): AxiosPromise<void> {
            return HotelApiFp(configuration).apiHotelImagesGet(hotelNameEn, cityNameEn, page, size, skip, width, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [hotelId] 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelNameEn] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelsAdminGetHotelsMetaGet(hotelId?: number, cityNameEn?: string, hotelNameEn?: string, widthSize?: number, heightSize?: number, options?: any): AxiosPromise<void> {
            return HotelApiFp(configuration).apiHotelsAdminGetHotelsMetaGet(hotelId, cityNameEn, hotelNameEn, widthSize, heightSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [count] 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [currency] 
         * @param {GetSimilarHotelsRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelsSimilarPost(count?: number, width?: number, height?: number, currency?: string, request?: GetSimilarHotelsRequest, options?: any): AxiosPromise<void> {
            return HotelApiFp(configuration).apiHotelsSimilarPost(count, width, height, currency, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelApi - object-oriented interface
 * @export
 * @class HotelApi
 * @extends {BaseAPI}
 */
export class HotelApi extends BaseAPI {
    /**
     * 
     * @param {string} [hotelNameEn] 
     * @param {string} [cityNameEn] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public apiHotelCommentsGet(hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, options?: any) {
        return HotelApiFp(this.configuration).apiHotelCommentsGet(hotelNameEn, cityNameEn, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [hotelNameEn] 
     * @param {string} [cityNameEn] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {number} [skip] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public apiHotelImagesGet(hotelNameEn?: string, cityNameEn?: string, page?: number, size?: number, skip?: number, width?: number, height?: number, options?: any) {
        return HotelApiFp(this.configuration).apiHotelImagesGet(hotelNameEn, cityNameEn, page, size, skip, width, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [hotelId] 
     * @param {string} [cityNameEn] 
     * @param {string} [hotelNameEn] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public apiHotelsAdminGetHotelsMetaGet(hotelId?: number, cityNameEn?: string, hotelNameEn?: string, widthSize?: number, heightSize?: number, options?: any) {
        return HotelApiFp(this.configuration).apiHotelsAdminGetHotelsMetaGet(hotelId, cityNameEn, hotelNameEn, widthSize, heightSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [count] 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {string} [currency] 
     * @param {GetSimilarHotelsRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public apiHotelsSimilarPost(count?: number, width?: number, height?: number, currency?: string, request?: GetSimilarHotelsRequest, options?: any) {
        return HotelApiFp(this.configuration).apiHotelsSimilarPost(count, width, height, currency, request, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HotelDetailsApi - axios parameter creator
 * @export
 */
export const HotelDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [cityName] 
         * @param {number} [hotelId] 
         * @param {string} [hotelName] 
         * @param {string} [checkInDate] 
         * @param {string} [checkOutDate] 
         * @param {string} [currencyCode] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelDetailsGet: async (cityName?: string, hotelId?: number, hotelName?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, widthSize?: number, heightSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HotelDetails`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cityName !== undefined) {
                localVarQueryParameter['CityName'] = cityName;
            }

            if (hotelId !== undefined) {
                localVarQueryParameter['HotelId'] = hotelId;
            }

            if (hotelName !== undefined) {
                localVarQueryParameter['HotelName'] = hotelName;
            }

            if (checkInDate !== undefined) {
                localVarQueryParameter['CheckInDate'] = checkInDate;
            }

            if (checkOutDate !== undefined) {
                localVarQueryParameter['CheckOutDate'] = checkOutDate;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['WidthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['HeightSize'] = heightSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelDetailsApi - functional programming interface
 * @export
 */
export const HotelDetailsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [cityName] 
         * @param {number} [hotelId] 
         * @param {string} [hotelName] 
         * @param {string} [checkInDate] 
         * @param {string} [checkOutDate] 
         * @param {string} [currencyCode] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelDetailsGet(cityName?: string, hotelId?: number, hotelName?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, widthSize?: number, heightSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelDetailsApiAxiosParamCreator(configuration).apiHotelDetailsGet(cityName, hotelId, hotelName, checkInDate, checkOutDate, currencyCode, widthSize, heightSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HotelDetailsApi - factory interface
 * @export
 */
export const HotelDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [cityName] 
         * @param {number} [hotelId] 
         * @param {string} [hotelName] 
         * @param {string} [checkInDate] 
         * @param {string} [checkOutDate] 
         * @param {string} [currencyCode] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelDetailsGet(cityName?: string, hotelId?: number, hotelName?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, widthSize?: number, heightSize?: number, options?: any): AxiosPromise<void> {
            return HotelDetailsApiFp(configuration).apiHotelDetailsGet(cityName, hotelId, hotelName, checkInDate, checkOutDate, currencyCode, widthSize, heightSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelDetailsApi - object-oriented interface
 * @export
 * @class HotelDetailsApi
 * @extends {BaseAPI}
 */
export class HotelDetailsApi extends BaseAPI {
    /**
     * 
     * @param {string} [cityName] 
     * @param {number} [hotelId] 
     * @param {string} [hotelName] 
     * @param {string} [checkInDate] 
     * @param {string} [checkOutDate] 
     * @param {string} [currencyCode] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelDetailsApi
     */
    public apiHotelDetailsGet(cityName?: string, hotelId?: number, hotelName?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, widthSize?: number, heightSize?: number, options?: any) {
        return HotelDetailsApiFp(this.configuration).apiHotelDetailsGet(cityName, hotelId, hotelName, checkInDate, checkOutDate, currencyCode, widthSize, heightSize, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HotelImagesApi - axios parameter creator
 * @export
 */
export const HotelImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hotelimagesByUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling hotelimagesByUrlGet.');
            }
            const localVarPath = `/hotelimages/{url}`
                .replace(`{${"url"}}`, encodeURIComponent(String(url)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelImagesApi - functional programming interface
 * @export
 */
export const HotelImagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hotelimagesByUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelImagesApiAxiosParamCreator(configuration).hotelimagesByUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HotelImagesApi - factory interface
 * @export
 */
export const HotelImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hotelimagesByUrlGet(url: string, options?: any): AxiosPromise<void> {
            return HotelImagesApiFp(configuration).hotelimagesByUrlGet(url, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelImagesApi - object-oriented interface
 * @export
 * @class HotelImagesApi
 * @extends {BaseAPI}
 */
export class HotelImagesApi extends BaseAPI {
    /**
     * 
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelImagesApi
     */
    public hotelimagesByUrlGet(url: string, options?: any) {
        return HotelImagesApiFp(this.configuration).hotelimagesByUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HotelNameListApi - axios parameter creator
 * @export
 */
export const HotelNameListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelNameListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HotelNameList`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelNameListApi - functional programming interface
 * @export
 */
export const HotelNameListApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelNameListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelNameListApiAxiosParamCreator(configuration).apiHotelNameListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HotelNameListApi - factory interface
 * @export
 */
export const HotelNameListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelNameListGet(options?: any): AxiosPromise<void> {
            return HotelNameListApiFp(configuration).apiHotelNameListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelNameListApi - object-oriented interface
 * @export
 * @class HotelNameListApi
 * @extends {BaseAPI}
 */
export class HotelNameListApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelNameListApi
     */
    public apiHotelNameListGet(options?: any) {
        return HotelNameListApiFp(this.configuration).apiHotelNameListGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * HotelSearchApi - axios parameter creator
 * @export
 */
export const HotelSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {HotelSearchRequest} [hotelSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelSearchPost: async (hotelSearch?: HotelSearchRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HotelSearch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof hotelSearch !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(hotelSearch !== undefined ? hotelSearch : {}) : (hotelSearch || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelSearchPreSellGet: async (width?: number, height?: number, currency?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HotelSearch/PreSell`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelSearchApi - functional programming interface
 * @export
 */
export const HotelSearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {HotelSearchRequest} [hotelSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelSearchPost(hotelSearch?: HotelSearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelSearchApiAxiosParamCreator(configuration).apiHotelSearchPost(hotelSearch, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelSearchPreSellGet(width?: number, height?: number, currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HotelSearchApiAxiosParamCreator(configuration).apiHotelSearchPreSellGet(width, height, currency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HotelSearchApi - factory interface
 * @export
 */
export const HotelSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {HotelSearchRequest} [hotelSearch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelSearchPost(hotelSearch?: HotelSearchRequest, options?: any): AxiosPromise<void> {
            return HotelSearchApiFp(configuration).apiHotelSearchPost(hotelSearch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [width] 
         * @param {number} [height] 
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelSearchPreSellGet(width?: number, height?: number, currency?: string, options?: any): AxiosPromise<void> {
            return HotelSearchApiFp(configuration).apiHotelSearchPreSellGet(width, height, currency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelSearchApi - object-oriented interface
 * @export
 * @class HotelSearchApi
 * @extends {BaseAPI}
 */
export class HotelSearchApi extends BaseAPI {
    /**
     * 
     * @param {HotelSearchRequest} [hotelSearch] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelSearchApi
     */
    public apiHotelSearchPost(hotelSearch?: HotelSearchRequest, options?: any) {
        return HotelSearchApiFp(this.configuration).apiHotelSearchPost(hotelSearch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {string} [currency] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelSearchApi
     */
    public apiHotelSearchPreSellGet(width?: number, height?: number, currency?: string, options?: any) {
        return HotelSearchApiFp(this.configuration).apiHotelSearchPreSellGet(width, height, currency, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {string} [value] 
         * @param {boolean} [hasValue] 
         * @param {string} [host] 
         * @param {number} [port] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageGet: async (name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Image`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['widthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['heightSize'] = heightSize;
            }

            if (value !== undefined) {
                localVarQueryParameter['Value'] = value;
            }

            if (hasValue !== undefined) {
                localVarQueryParameter['HasValue'] = hasValue;
            }

            if (host !== undefined) {
                localVarQueryParameter['Host'] = host;
            }

            if (port !== undefined) {
                localVarQueryParameter['Port'] = port;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {string} [value] 
         * @param {boolean} [hasValue] 
         * @param {string} [host] 
         * @param {number} [port] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageGet(name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ImageApiAxiosParamCreator(configuration).apiImageGet(name, widthSize, heightSize, value, hasValue, host, port, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {string} [value] 
         * @param {boolean} [hasValue] 
         * @param {string} [host] 
         * @param {number} [port] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageGet(name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options?: any): AxiosPromise<void> {
            return ImageApiFp(configuration).apiImageGet(name, widthSize, heightSize, value, hasValue, host, port, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * 
     * @param {string} [name] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {string} [value] 
     * @param {boolean} [hasValue] 
     * @param {string} [host] 
     * @param {number} [port] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public apiImageGet(name?: string, widthSize?: number, heightSize?: number, value?: string, hasValue?: boolean, host?: string, port?: number, options?: any) {
        return ImageApiFp(this.configuration).apiImageGet(name, widthSize, heightSize, value, hasValue, host, port, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * MetaApi - axios parameter creator
 * @export
 */
export const MetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [cityNameEn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCityMetaGet: async (cityNameEn?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/City/meta`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cityNameEn !== undefined) {
                localVarQueryParameter['cityNameEn'] = cityNameEn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelTypeNameEn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelTypeMetaGet: async (cityNameEn?: string, hotelTypeNameEn?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/hotelType/meta`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cityNameEn !== undefined) {
                localVarQueryParameter['cityNameEn'] = cityNameEn;
            }

            if (hotelTypeNameEn !== undefined) {
                localVarQueryParameter['hotelTypeNameEn'] = hotelTypeNameEn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetaApi - functional programming interface
 * @export
 */
export const MetaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [cityNameEn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCityMetaGet(cityNameEn?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaApiAxiosParamCreator(configuration).apiCityMetaGet(cityNameEn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelTypeNameEn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHotelTypeMetaGet(cityNameEn?: string, hotelTypeNameEn?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetaApiAxiosParamCreator(configuration).apiHotelTypeMetaGet(cityNameEn, hotelTypeNameEn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetaApi - factory interface
 * @export
 */
export const MetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [cityNameEn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCityMetaGet(cityNameEn?: string, options?: any): AxiosPromise<void> {
            return MetaApiFp(configuration).apiCityMetaGet(cityNameEn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelTypeNameEn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHotelTypeMetaGet(cityNameEn?: string, hotelTypeNameEn?: string, options?: any): AxiosPromise<void> {
            return MetaApiFp(configuration).apiHotelTypeMetaGet(cityNameEn, hotelTypeNameEn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetaApi - object-oriented interface
 * @export
 * @class MetaApi
 * @extends {BaseAPI}
 */
export class MetaApi extends BaseAPI {
    /**
     * 
     * @param {string} [cityNameEn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public apiCityMetaGet(cityNameEn?: string, options?: any) {
        return MetaApiFp(this.configuration).apiCityMetaGet(cityNameEn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [cityNameEn] 
     * @param {string} [hotelTypeNameEn] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public apiHotelTypeMetaGet(cityNameEn?: string, hotelTypeNameEn?: string, options?: any) {
        return MetaApiFp(this.configuration).apiHotelTypeMetaGet(cityNameEn, hotelTypeNameEn, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * PopularApi - axios parameter creator
 * @export
 */
export const PopularApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPopularGet: async (currencyCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/popular`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PopularApi - functional programming interface
 * @export
 */
export const PopularApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPopularGet(currencyCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PopularApiAxiosParamCreator(configuration).apiPopularGet(currencyCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PopularApi - factory interface
 * @export
 */
export const PopularApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPopularGet(currencyCode?: string, options?: any): AxiosPromise<void> {
            return PopularApiFp(configuration).apiPopularGet(currencyCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PopularApi - object-oriented interface
 * @export
 * @class PopularApi
 * @extends {BaseAPI}
 */
export class PopularApi extends BaseAPI {
    /**
     * 
     * @param {string} [currencyCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PopularApi
     */
    public apiPopularGet(currencyCode?: string, options?: any) {
        return PopularApiFp(this.configuration).apiPopularGet(currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSatisfactionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Report/Satisfaction`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSimpleGet: async (currency?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Report/Simple`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSatisfactionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ReportApiAxiosParamCreator(configuration).apiReportSatisfactionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReportSimpleGet(currency?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ReportApiAxiosParamCreator(configuration).apiReportSimpleGet(currency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSatisfactionGet(options?: any): AxiosPromise<void> {
            return ReportApiFp(configuration).apiReportSatisfactionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [currency] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReportSimpleGet(currency?: string, options?: any): AxiosPromise<void> {
            return ReportApiFp(configuration).apiReportSimpleGet(currency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportSatisfactionGet(options?: any) {
        return ReportApiFp(this.configuration).apiReportSatisfactionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [currency] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiReportSimpleGet(currency?: string, options?: any) {
        return ReportApiFp(this.configuration).apiReportSimpleGet(currency, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * RoomPriceApi - axios parameter creator
 * @export
 */
export const RoomPriceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [hotelId] 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelNameEn] 
         * @param {string} [checkInDate] 
         * @param {string} [checkOutDate] 
         * @param {string} [currencyCode] 
         * @param {boolean} [preSale] 
         * @param {number} [capacity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomTypePriceGet: async (hotelId?: number, cityNameEn?: string, hotelNameEn?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, preSale?: boolean, capacity?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RoomTypePrice`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hotelId !== undefined) {
                localVarQueryParameter['HotelId'] = hotelId;
            }

            if (cityNameEn !== undefined) {
                localVarQueryParameter['CityNameEn'] = cityNameEn;
            }

            if (hotelNameEn !== undefined) {
                localVarQueryParameter['HotelNameEn'] = hotelNameEn;
            }

            if (checkInDate !== undefined) {
                localVarQueryParameter['CheckInDate'] = (checkInDate as any instanceof Date) ?
                    (checkInDate as any).toISOString() :
                    checkInDate;
            }

            if (checkOutDate !== undefined) {
                localVarQueryParameter['CheckOutDate'] = (checkOutDate as any instanceof Date) ?
                    (checkOutDate as any).toISOString() :
                    checkOutDate;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['CurrencyCode'] = currencyCode;
            }

            if (preSale !== undefined) {
                localVarQueryParameter['PreSale'] = preSale;
            }

            if (capacity !== undefined) {
                localVarQueryParameter['Capacity'] = capacity;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomPriceApi - functional programming interface
 * @export
 */
export const RoomPriceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [hotelId] 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelNameEn] 
         * @param {string} [checkInDate] 
         * @param {string} [checkOutDate] 
         * @param {string} [currencyCode] 
         * @param {boolean} [preSale] 
         * @param {number} [capacity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomTypePriceGet(hotelId?: number, cityNameEn?: string, hotelNameEn?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, preSale?: boolean, capacity?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await RoomPriceApiAxiosParamCreator(configuration).apiRoomTypePriceGet(hotelId, cityNameEn, hotelNameEn, checkInDate, checkOutDate, currencyCode, preSale, capacity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RoomPriceApi - factory interface
 * @export
 */
export const RoomPriceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [hotelId] 
         * @param {string} [cityNameEn] 
         * @param {string} [hotelNameEn] 
         * @param {string} [checkInDate] 
         * @param {string} [checkOutDate] 
         * @param {string} [currencyCode] 
         * @param {boolean} [preSale] 
         * @param {number} [capacity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomTypePriceGet(hotelId?: number, cityNameEn?: string, hotelNameEn?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, preSale?: boolean, capacity?: number, options?: any): AxiosPromise<void> {
            return RoomPriceApiFp(configuration).apiRoomTypePriceGet(hotelId, cityNameEn, hotelNameEn, checkInDate, checkOutDate, currencyCode, preSale, capacity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomPriceApi - object-oriented interface
 * @export
 * @class RoomPriceApi
 * @extends {BaseAPI}
 */
export class RoomPriceApi extends BaseAPI {
    /**
     * 
     * @param {number} [hotelId] 
     * @param {string} [cityNameEn] 
     * @param {string} [hotelNameEn] 
     * @param {string} [checkInDate] 
     * @param {string} [checkOutDate] 
     * @param {string} [currencyCode] 
     * @param {boolean} [preSale] 
     * @param {number} [capacity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomPriceApi
     */
    public apiRoomTypePriceGet(hotelId?: number, cityNameEn?: string, hotelNameEn?: string, checkInDate?: string, checkOutDate?: string, currencyCode?: string, preSale?: boolean, capacity?: number, options?: any) {
        return RoomPriceApiFp(this.configuration).apiRoomTypePriceGet(hotelId, cityNameEn, hotelNameEn, checkInDate, checkOutDate, currencyCode, preSale, capacity, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SpecialOfferApi - axios parameter creator
 * @export
 */
export const SpecialOfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecialOfferGetAllGet: async (currencyCode?: string, widthSize?: number, heightSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SpecialOffer/GetAll`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (widthSize !== undefined) {
                localVarQueryParameter['widthSize'] = widthSize;
            }

            if (heightSize !== undefined) {
                localVarQueryParameter['heightSize'] = heightSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecialOfferGetByHotelByHotelIdGet: async (hotelId: number, currencyCode?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            if (hotelId === null || hotelId === undefined) {
                throw new RequiredError('hotelId','Required parameter hotelId was null or undefined when calling apiSpecialOfferGetByHotelByHotelIdGet.');
            }
            const localVarPath = `/api/SpecialOffer/GetByHotel/{hotelId}`
                .replace(`{${"hotelId"}}`, encodeURIComponent(String(hotelId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecialOfferApi - functional programming interface
 * @export
 */
export const SpecialOfferApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecialOfferGetAllGet(currencyCode?: string, widthSize?: number, heightSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SpecialOfferApiAxiosParamCreator(configuration).apiSpecialOfferGetAllGet(currencyCode, widthSize, heightSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecialOfferGetByHotelByHotelIdGet(hotelId: number, currencyCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SpecialOfferApiAxiosParamCreator(configuration).apiSpecialOfferGetByHotelByHotelIdGet(hotelId, currencyCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpecialOfferApi - factory interface
 * @export
 */
export const SpecialOfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {number} [widthSize] 
         * @param {number} [heightSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecialOfferGetAllGet(currencyCode?: string, widthSize?: number, heightSize?: number, options?: any): AxiosPromise<void> {
            return SpecialOfferApiFp(configuration).apiSpecialOfferGetAllGet(currencyCode, widthSize, heightSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecialOfferGetByHotelByHotelIdGet(hotelId: number, currencyCode?: string, options?: any): AxiosPromise<void> {
            return SpecialOfferApiFp(configuration).apiSpecialOfferGetByHotelByHotelIdGet(hotelId, currencyCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpecialOfferApi - object-oriented interface
 * @export
 * @class SpecialOfferApi
 * @extends {BaseAPI}
 */
export class SpecialOfferApi extends BaseAPI {
    /**
     * 
     * @param {string} [currencyCode] 
     * @param {number} [widthSize] 
     * @param {number} [heightSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialOfferApi
     */
    public apiSpecialOfferGetAllGet(currencyCode?: string, widthSize?: number, heightSize?: number, options?: any) {
        return SpecialOfferApiFp(this.configuration).apiSpecialOfferGetAllGet(currencyCode, widthSize, heightSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} hotelId 
     * @param {string} [currencyCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialOfferApi
     */
    public apiSpecialOfferGetByHotelByHotelIdGet(hotelId: number, currencyCode?: string, options?: any) {
        return SpecialOfferApiFp(this.configuration).apiSpecialOfferGetByHotelByHotelIdGet(hotelId, currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * TopCitiesApi - axios parameter creator
 * @export
 */
export const TopCitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTopCitiesHotelsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TopCities/Hotels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopCitiesApi - functional programming interface
 * @export
 */
export const TopCitiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTopCitiesHotelsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TopCitiesApiAxiosParamCreator(configuration).apiTopCitiesHotelsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TopCitiesApi - factory interface
 * @export
 */
export const TopCitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTopCitiesHotelsGet(options?: any): AxiosPromise<void> {
            return TopCitiesApiFp(configuration).apiTopCitiesHotelsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TopCitiesApi - object-oriented interface
 * @export
 * @class TopCitiesApi
 * @extends {BaseAPI}
 */
export class TopCitiesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopCitiesApi
     */
    public apiTopCitiesHotelsGet(options?: any) {
        return TopCitiesApiFp(this.configuration).apiTopCitiesHotelsGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * TopDestinationApi - axios parameter creator
 * @export
 */
export const TopDestinationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTopDestinationHotelsGet: async (currencyCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TopDestination/Hotels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopDestinationApi - functional programming interface
 * @export
 */
export const TopDestinationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTopDestinationHotelsGet(currencyCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TopDestinationApiAxiosParamCreator(configuration).apiTopDestinationHotelsGet(currencyCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TopDestinationApi - factory interface
 * @export
 */
export const TopDestinationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTopDestinationHotelsGet(currencyCode?: string, options?: any): AxiosPromise<void> {
            return TopDestinationApiFp(configuration).apiTopDestinationHotelsGet(currencyCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TopDestinationApi - object-oriented interface
 * @export
 * @class TopDestinationApi
 * @extends {BaseAPI}
 */
export class TopDestinationApi extends BaseAPI {
    /**
     * 
     * @param {string} [currencyCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopDestinationApi
     */
    public apiTopDestinationHotelsGet(currencyCode?: string, options?: any) {
        return TopDestinationApiFp(this.configuration).apiTopDestinationHotelsGet(currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {number} satisfactionValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserByUserIdSatisfactionBySatisfactionValuePost: async (userId: number, satisfactionValue: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiUserByUserIdSatisfactionBySatisfactionValuePost.');
            }
            // verify required parameter 'satisfactionValue' is not null or undefined
            if (satisfactionValue === null || satisfactionValue === undefined) {
                throw new RequiredError('satisfactionValue','Required parameter satisfactionValue was null or undefined when calling apiUserByUserIdSatisfactionBySatisfactionValuePost.');
            }
            const localVarPath = `/api/user/{userId}/Satisfaction/{satisfactionValue}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"satisfactionValue"}}`, encodeURIComponent(String(satisfactionValue)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {number} satisfactionValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserByUserIdSatisfactionBySatisfactionValuePost(userId: number, satisfactionValue: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiUserByUserIdSatisfactionBySatisfactionValuePost(userId, satisfactionValue, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {number} satisfactionValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserByUserIdSatisfactionBySatisfactionValuePost(userId: number, satisfactionValue: number, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).apiUserByUserIdSatisfactionBySatisfactionValuePost(userId, satisfactionValue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {number} userId 
     * @param {number} satisfactionValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserByUserIdSatisfactionBySatisfactionValuePost(userId: number, satisfactionValue: number, options?: any) {
        return UserApiFp(this.configuration).apiUserByUserIdSatisfactionBySatisfactionValuePost(userId, satisfactionValue, options).then((request) => request(this.axios, this.basePath));
    }

}


